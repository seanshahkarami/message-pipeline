#!/usr/bin/env python3
import argparse
import json
import os
import requests
import secrets


def read_file(filename):
    with open(filename) as file:
        return file.read()


def read_config_file(filename):
    with open(filename) as file:
        return json.load(file)


rabbitmq_url = 'http://localhost:15672/api'


def add_user(username, password):
    add_rabbitmq_user_with_password(username, password)
    set_rabbitmq_user_permissions(username)


def remove_user(username):
    url = rabbitmq_url + '/users/{}'.format(username)
    requests.delete(url, auth=('admin', 'admin'))


def add_rabbitmq_user_with_password(username, password):
    data = json.dumps({
        'name': username,
        'password': password,
        'tags': '',
    })

    url = rabbitmq_url + '/users/{}'.format(username)
    requests.put(url, data=data, auth=('admin', 'admin'))


def set_rabbitmq_user_permissions(username):
    inqueue = 'in-' + username

    data = json.dumps({
        'configure': '^{}$'.format(inqueue),
        'write': '^publish$',
        'read': '^{}$'.format(inqueue),
    })

    url = rabbitmq_url + '/permissions/{}/{}'.format('node1', username)
    requests.put(url, data=data, auth=('admin', 'admin'))


SERVICE_TEMPLATE = '''
#!/bin/sh

export WAGGLE_PLUGIN_CREDENTIALS={credentials}

{executable}
'''


def add_service(name, credentials, executable):
    formatted = SERVICE_TEMPLATE.format(
        credentials=credentials,
        executable=executable).strip()

    service_filename = 'run/{}'.format(name)

    os.makedirs('run', exist_ok=True)

    with open(service_filename, 'w') as file:
        file.writelines(formatted)

    os.chmod(service_filename, 0o755)


def remove_service(name):
    try:
        os.remove('run/{}'.format(name))
    except OSError:
        pass


def get_username_for_plugin_config(config):
    return 'plugin-{}-{}-{}'.format(
        config['plugin_id'],
        config['plugin_version'],
        config['plugin_instance'])


def enable_plugin(plugin_dir):
    config = read_config_file(os.path.join(plugin_dir, 'plugin.json'))
    username = get_username_for_plugin_config(config)
    password = secrets.token_urlsafe(32)
    credentials = '{}:{}'.format(username, password)
    executable = os.path.abspath(os.path.join(plugin_dir, 'plugin'))
    add_user(username, password)
    add_service(username, credentials, executable)
    print('enabled', username)


def disable_plugin(plugin_dir):
    config = read_config_file(os.path.join(plugin_dir, 'plugin.json'))
    username = get_username_for_plugin_config(config)
    remove_user(username)
    remove_service(username)
    print('disabled', username)


def main():
    parser = argparse.ArgumentParser()

    subparsers = parser.add_subparsers(dest='subcommand', required=True)

    parser_enable = subparsers.add_parser('enable')
    parser_enable.add_argument('plugin_dirs', nargs='+')

    parser_disable = subparsers.add_parser('disable')
    parser_disable.add_argument('plugin_dirs', nargs='+')

    args = parser.parse_args()

    if args.subcommand == 'enable':
        for plugin in args.plugin_dirs:
            enable_plugin(plugin)
    elif args.subcommand == 'disable':
        for plugin in args.plugin_dirs:
            disable_plugin(plugin)


if __name__ == '__main__':
    main()
