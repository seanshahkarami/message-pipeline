#!/usr/bin/env python3
import argparse
import json
import os
import secrets
import subprocess


def read_file(filename):
    with open(filename) as file:
        return file.read()


def exec_rabbitmqctl(args):
    rabbitmqctl = ['docker', 'exec', '-ti', 'rabbitmq-dev', 'rabbitmqctl']
    return subprocess.check_output(rabbitmqctl + args)


def add_rabbitmq_user(username, password):
    try:
        exec_rabbitmqctl(['add_user', username, password])
    except subprocess.CalledProcessError:
        exec_rabbitmqctl(['change_password', username, password])

    inqueue = 'in-' + username
    config_permissions = '^{}$'.format(inqueue)
    write_permissions = '^data$'
    read_permissions = '^{}$'.format(inqueue)

    for vhost in ['node1', 'node2']:
        exec_rabbitmqctl([
            'set_permissions',
            '-p', vhost,
            username,
            config_permissions,
            write_permissions,
            read_permissions,
        ])


def format_template(credentials, executable, format='systemd'):
    template_dir = os.path.join('templates')
    template = read_file(os.path.join(template_dir, format))
    return template.format(credentials=credentials, executable=executable)


def enable_plugin(plugin_dir):
    config = read_config_file(os.path.join(plugin_dir, 'plugin.json'))

    username = 'plugin-{}-{}-{}'.format(
        config['plugin_id'],
        config['plugin_version'],
        config['plugin_instance'])

    password = secrets.token_urlsafe(32)

    add_rabbitmq_user(username, password)

    filename = 'run/{}'.format(username)
    credentials = '{}:{}'.format(username, password)

    service_script = format_template(
        credentials=credentials,
        executable=os.path.abspath(os.path.join(plugin_dir, 'plugin')),
        format='shell')

    with open(filename, 'w') as file:
        file.writelines(service_script)

    os.chmod(filename, 0o755)

    print('enabled', username)


def enable_plugins(plugin_dirs):
    os.makedirs('run', exist_ok=True)

    for plugin_dir in plugin_dirs:
        enable_plugin(plugin_dir)


def disable_plugins(plugin_dirs):
    for plugin_dir in plugin_dirs:
        disable_plugin(plugin_dir)


def disable_plugin(plugin_dir):
    config = read_config_file(os.path.join(plugin_dir, 'plugin.json'))

    username = 'plugin-{}-{}-{}'.format(
        config['plugin_id'],
        config['plugin_version'],
        config['plugin_instance'])

    try:
        exec_rabbitmqctl(['delete_user', username])
    except subprocess.CalledProcessError:
        pass

    try:
        os.remove('run/{}'.format(username))
    except Exception:
        pass

    print('disabled', username)


def read_config_file(filename):
    with open(filename) as file:
        return json.load(file)


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcommand', required=True)

    parser_enable = subparsers.add_parser('enable')
    parser_enable.add_argument('plugin_dirs', nargs='+')

    parser_disable = subparsers.add_parser('disable')
    parser_disable.add_argument('plugin_dirs', nargs='+')

    args = parser.parse_args()

    if args.subcommand == 'enable':
        enable_plugins(args.plugin_dirs)
    elif args.subcommand == 'disable':
        disable_plugins(args.plugin_dirs)


if __name__ == '__main__':
    main()
