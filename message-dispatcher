#!/usr/bin/env python3
import pika
from waggle.protocol.v0 import *


def get_mailbox_for_datagram(datagram):
    return 'in-plugin-{}-{}-{}'.format(
        datagram['plugin_id'],
        datagram['plugin_major_version'],
        datagram['plugin_instance'])


def forward_datagrams_to_plugin(ch, message):
    try:
        datagrams = unpack_datagrams(message['body'])
    except ValueError:
        print('invalid datagrams - dropping')
        return

    for datagram in datagrams:
        print('---')
        mailbox = get_mailbox_for_datagram(datagram)
        print(datagram['body'], '->', mailbox)
        ch.basic_publish('', mailbox, pack_datagrams([datagram]))


plugin_instances = [
    (1, 0, 0),
    (1, 0, 1),
    (1, 0, 2),
    (2, 0, 0),
]

dispatch_table = {
    (0, 0): forward_datagrams_to_plugin,
}


def process_message(ch, method, properties, body):
    for message in unpack_waggle_packets(body):
        message_type = (message['message_major_type'], message['message_minor_type'])

        if message_type not in dispatch_table:
            print('dropping', message)

        print('dispatch', message)
        dispatch_table[message_type](ch, message)

    ch.basic_ack(delivery_tag=method.delivery_tag)


# would really love to clean up pki bit of this... want to just use tls auth
# everywhere. then, workers can really exist anywhere securely.
# clean up and manage the certificate store.

if __name__ == '__main__':
    parameters = pika.URLParameters('amqp://admin:testing@localhost')
    connection = pika.BlockingConnection(parameters)
    channel = connection.channel()

    for p in plugin_instances:
        mailbox = 'in-plugin-{}-{}-{}'.format(*p)
        channel.queue_declare(mailbox, durable=True)

    channel.basic_consume(process_message, 'to-fedcba9876543210')
    channel.start_consuming()
