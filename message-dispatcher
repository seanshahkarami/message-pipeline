#!/usr/bin/env python3
import logging
import pika
from waggle.protocol.v0 import *


formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
ch.setFormatter(formatter)

logger = logging.getLogger('message-dispatcher')
logger.setLevel(logging.INFO)
logger.addHandler(ch)


def get_mailbox_for_datagram(datagram):
    return 'in-plugin-{}-{}-{}'.format(
        datagram['plugin_id'],
        datagram['plugin_major_version'],
        datagram['plugin_instance'])


def forward_datagrams_to_plugin(ch, message):
    try:
        datagrams = unpack_datagrams(message['body'])
    except ValueError:
        logger.info('Dropping invalid datagrams.')
        return

    for datagram in datagrams:
        mailbox = get_mailbox_for_datagram(datagram)
        logger.info('Routing datagram to %s.', mailbox)
        ch.basic_publish('', mailbox, pack_datagrams([datagram]))


plugin_instances = [
    (1, 0, 0),
    (1, 0, 1),
    (1, 0, 2),
    (2, 0, 0),
]

# perhaps plugins should be the ones to define this. error can be logged if
# we try to send to a nonexistant exchange / queue.

dispatch_table = {
    (0, 0): forward_datagrams_to_plugin,
}

def route_message(ch, message):
    message_type = (message['message_major_type'], message['message_minor_type'])

    if message_type not in dispatch_table:
        logger.info('Dropping message %s', message)
        return

    dispatch_table[message_type](ch, message)

def process_message(ch, method, properties, body):
    for message in unpack_waggle_packets(body):
        route_message(message)

    ch.basic_ack(delivery_tag=method.delivery_tag)


def get_rabbitmq_connection():
    logger.info('Connecting to RabbitMQ server.')

    credentials = pika.PlainCredentials(
        username='admin',
        password='testing')

    parameters = pika.ConnectionParameters(
        host='localhost',
        credentials=credentials)

    connection = pika.BlockingConnection(parameters)

    logger.info('Connected to RabbitMQ server.')

    return connection


def declare_queues(channel):
    for p in plugin_instances:
        mailbox = 'in-plugin-{}-{}-{}'.format(*p)
        channel.queue_declare(mailbox, durable=True)


def start_message_processor(channel):
    logger.info('Starting message processor.')

    channel.basic_consume(process_message, 'to-fedcba9876543210')

    try:
        channel.start_consuming()
    finally:
        logger.info('Stopped message processor.')


def start_dispatching():
    connection = get_rabbitmq_connection()
    channel = connection.channel()
    declare_queues(channel)
    start_message_processor(channel)


if __name__ == '__main__':
    logger.info('Started message dispatcher.')

    while True:
        try:
            start_dispatching()
        except KeyboardInterrupt:
            break
        except Exception:
            logger.exception('Unhandled exception occurred. Will retry...')
            time.sleep(5)

    logger.info('Stopped message dispatcher.')
