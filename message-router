#!/usr/bin/env python3
import logging
import pika
import time
from waggle.protocol.v0 import *


formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
ch.setFormatter(formatter)

logger = logging.getLogger('message-router')
logger.setLevel(logging.INFO)
logger.addHandler(ch)

DATA = (0, 0)


def get_message_type(message):
    return (message['message_major_type'],
            message['message_minor_type'])


def get_mailbox_for_receiver_id(receiver_id):
    return 'to-{}'.format(receiver_id.decode())


def route_to_receiver(ch, message):
    logger.info('Routing message from %s to %s.', message['sender_id'], message['receiver_id'])
    mailbox = get_mailbox_for_receiver_id(message['receiver_id'])
    ch.basic_publish('', mailbox, pack_waggle_packets([message]))


def get_mailbox_for_datagram(datagram):
    return 'in-plugin-{}-{}-{}'.format(
        datagram['plugin_id'],
        datagram['plugin_major_version'],
        datagram['plugin_instance'])


def route_to_plugin(ch, message):
    try:
        datagrams = unpack_datagrams(message['body'])
    except ValueError:
        logger.info('Dropping invalid datagrams.')
        return

    for datagram in datagrams:
        mailbox = get_mailbox_for_datagram(datagram)
        logger.info('Routing datagram to %s.', mailbox)
        ch.basic_publish('', mailbox, pack_datagrams([datagram]))


routing_table = {
    (b'0123456789abcdef', b'fedcba9876543210', DATA): route_to_receiver,
    (b'0123456789abcdef', b'0123456789abcdef', DATA): route_to_receiver,
    (b'fedcba9876543210', b'fedcba9876543210', DATA): route_to_receiver,
    (b'0000000000000000', b'0000000000000001', DATA): route_to_plugin,
}


def route_message(ch, message):
    try:
        action = routing_table[(message['sender_id'], message['receiver_id'], get_message_type(message))]
    except KeyError:
        logger.info('Dropping message %s.', message)
        return

    action(ch, message)


def process_message(ch, method, properties, body):
    for message in unpack_waggle_packets(body):
        route_message(ch, message)

    ch.basic_ack(delivery_tag=method.delivery_tag)


def get_rabbitmq_connection():
    logger.info('Connecting to RabbitMQ server.')

    credentials = pika.PlainCredentials(
        username='admin',
        password='testing')

    parameters = pika.ConnectionParameters(
        host='localhost',
        credentials=credentials)

    connection = pika.BlockingConnection(parameters)

    logger.info('Connected to RabbitMQ server.')

    return connection


def declare_incoming_message_queue(channel):
    channel.queue_declare(queue='messages', durable=True)


def declare_mailbox_queues(channel):
    for _, receiver_id, _ in routing_table:
        mailbox = get_mailbox_for_receiver_id(receiver_id)
        channel.queue_declare(queue=mailbox, durable=True)


def declare_queues(channel):
    logger.info('Declaring message queues.')
    declare_incoming_message_queue(channel)
    declare_mailbox_queues(channel)


def start_message_processor(channel):
    logger.info('Starting message processor.')
    channel.basic_consume(process_message, 'messages')

    try:
        channel.start_consuming()
    finally:
        logger.info('Stopped message processor.')


def start_routing():
    connection = get_rabbitmq_connection()
    channel = connection.channel()
    declare_queues(channel)
    start_message_processor(channel)


if __name__ == '__main__':
    while True:
        try:
            start_routing()
        except KeyboardInterrupt:
            break
        except Exception:
            logger.exception('Unhandled exception occurred. Will retry...')
            time.sleep(5)
