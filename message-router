#!/usr/bin/env python3
import argparse
import json
import logging
import pika
import time
from waggle.protocol.v0 import *


formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
ch.setFormatter(formatter)

logger = logging.getLogger('message-router')
logger.setLevel(logging.DEBUG)
logger.addHandler(ch)


def apply_ugly_normalize_rule_hack(rule):
    try:
        rule['sender_id'] = rule['sender_id'].ljust(16, ' ').encode()
    except KeyError:
        pass

    try:
        rule['receiver_id'] = rule['receiver_id'].ljust(16, ' ').encode()
    except KeyError:
        pass

    return rule


def compile_rules(rules):
    table = {}

    for rule, action in rules:
        rule = apply_ugly_normalize_rule_hack(rule)

        ordered_rule = sorted(rule.items())
        keys = tuple(k for k, v in ordered_rule)
        vals = tuple(v for k, v in ordered_rule)

        if keys not in table:
            table[keys] = {}

        try:
            table[keys][vals] = globals()[action]
        except KeyError:
            logger.warning('No action "%s" defined.', action)

    return table


def get_actions_for_message(msg):
    for keys, patterns in rule_table.items():
        try:
            vals = tuple(msg[key] for key in keys)
            action = patterns[vals]
            yield action
        except KeyError:
            continue


def get_mailbox_for_receiver_id(receiver_id):
    return 'to-' + receiver_id.decode().strip()


def route_to_receiver(ch, msg):
    logger.info(
        'Routing message from %s to %s.',
        msg['sender_id'],
        msg['receiver_id'],
    )

    mailbox = get_mailbox_for_receiver_id(msg['receiver_id'])
    ch.queue_declare(queue=mailbox, durable=True)
    ch.basic_publish(exchange='', routing_key=mailbox, body=pack_waggle_packets([msg]))


# correct behavior should be to send whole message packet to plugin with data
# packet inside..., not some special case...

def get_mailbox_for_datagram(datagram):
    return 'to-plugin-{}-{}-{}'.format(
        datagram['plugin_id'],
        datagram['plugin_major_version'],
        datagram['plugin_instance'])


def deploy_package(ch, msg):
    logger.info('Deploying packages on %s: %s', msg['receiver_id'], msg['body'].decode())


def print_test(ch, msg):
    logger.info('Got test message: %s', msg['body'].decode())


def route_to_plugin(ch, msg):
    try:
        datagrams = unpack_datagrams(msg['body'])
    except ValueError:
        logger.info('Dropping invalid datagrams.')
        return

    for datagram in datagrams:
        logger.info('Routing datagram to plugin %s %s %s.', datagram['plugin_id'], datagram['plugin_major_version'], datagram['plugin_instance'])
        mailbox = get_mailbox_for_datagram(datagram)
        ch.queue_declare(queue=mailbox, durable=True)
        ch.basic_publish('', mailbox, pack_datagrams([datagram]))


def process_waggle_message(ch, msg):
    for action in get_actions_for_message(msg):
        action(ch, msg)


def publish_waggle_message(ch, queue, data):
    pass


def process_rabbitmq_message(channel, method, properties, body):
    for msg in unpack_waggle_packets(body):
        process_waggle_message(channel, msg)

    channel.basic_ack(delivery_tag=method.delivery_tag)


def connect_to_broker_and_start_routing(broker_parameters):
    logger.info('Connecting to RabbitMQ server.')
    connection = pika.BlockingConnection(broker_parameters)
    channel = connection.channel()

    logger.info('Starting message processor.')
    channel.queue_declare(queue='messages', durable=True)
    channel.basic_consume(process_rabbitmq_message, 'messages')

    try:
        channel.start_consuming()
    finally:
        logger.info('Stopped message processor.')


def load_rules_from_file(filename):
    with open(filename) as file:
        return compile_rules(json.load(file))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('rulefile')
    parser.add_argument('url')
    args = parser.parse_args()

    rule_table = load_rules_from_file(args.rulefile)
    broker_parameters = pika.URLParameters(args.url)

    while True:
        try:
            connect_to_broker_and_start_routing(broker_parameters)
        except KeyboardInterrupt:
            break
        except Exception:
            logger.exception('Unhandled exception occurred. Will retry...')
            time.sleep(5)
