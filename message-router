#!/usr/bin/env python3
from waggle.protocol.v0 import *
import pika

routing_table = {
    (b'0123456789abcdef', b'fedcba9876543210'),
    (b'0123456789abcdef', b'0123456789abcdef'),
    (b'fedcba9876543210', b'fedcba9876543210'),
}


def isroutable(message):
    return (message['sender_id'], message['receiver_id']) in routing_table


def get_mailbox_for_receiver_id(receiver_id):
    return 'to-{}'.format(receiver_id.decode())


def process_message(ch, method, properties, body):
    for message in unpack_waggle_packets(body):
        if not isroutable(message):
            print('dropping', message)
            continue

        mailbox = get_mailbox_for_receiver_id(receiver_id)

        print('routing', message, 'to', mailbox)
        ch.basic_publish(exchange='', routing_key=mailbox, body=pack_waggle_packets([message]))

    ch.basic_ack(delivery_tag=method.delivery_tag)


if __name__ == '__main__':
    parameters = pika.URLParameters('amqp://admin:testing@localhost')
    connection = pika.BlockingConnection(parameters)
    channel = connection.channel()

    channel.queue_declare(queue='messages', durable=True)

    for sender_id, receiver_id in routing_table:
        mailbox = get_mailbox_for_receiver_id(receiver_id)
        channel.queue_declare(queue=mailbox, durable=True)

    channel.basic_consume(process_message, 'messages')
    channel.start_consuming()
