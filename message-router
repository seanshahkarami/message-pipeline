#!/usr/bin/env python3
import logging
import pika
import time
from waggle.protocol.v0 import *


formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
ch.setFormatter(formatter)

logger = logging.getLogger('message-router')
logger.setLevel(logging.INFO)
logger.addHandler(ch)


routing_table = {
    (b'0123456789abcdef', b'fedcba9876543210', (0, 0)),
    (b'0123456789abcdef', b'0123456789abcdef', (0, 0)),
    (b'fedcba9876543210', b'fedcba9876543210', (0, 0)),
}


def isroutable(message):
    message_type = (message['message_major_type'], message['message_minor_type'])
    return (message['sender_id'], message['receiver_id'], message_type) in routing_table


def get_mailbox_for_receiver_id(receiver_id):
    return 'to-{}'.format(receiver_id.decode())


def process_message(ch, method, properties, body):
    for message in unpack_waggle_packets(body):
        if not isroutable(message):
            logger.info('Dropping message from %s to %s.', message['sender_id'], message['receiver_id'])
            continue

        logger.info('Routing message from %s to %s.', message['sender_id'], message['receiver_id'])
        mailbox = get_mailbox_for_receiver_id(message['receiver_id'])
        ch.basic_publish('', mailbox, pack_waggle_packets([message]))

    ch.basic_ack(delivery_tag=method.delivery_tag)


def get_rabbitmq_connection():
    logger.info('Connecting to RabbitMQ server.')

    credentials = pika.PlainCredentials(
        username='admin',
        password='testing')

    parameters = pika.ConnectionParameters(
        host='localhost',
        credentials=credentials)

    connection = pika.BlockingConnection(parameters)

    logger.info('Connected to RabbitMQ server.')

    return connection


def declare_incoming_message_queue(channel):
    channel.queue_declare(queue='messages', durable=True)


def declare_mailbox_queues(channel):
    for _, receiver_id, _ in routing_table:
        mailbox = get_mailbox_for_receiver_id(receiver_id)
        channel.queue_declare(queue=mailbox, durable=True)


def declare_queues(channel):
    logger.info('Declaring message queues.')
    declare_incoming_message_queue(channel)
    declare_mailbox_queues(channel)


def start_message_processor(channel):
    logger.info('Starting message processor.')
    channel.basic_consume(process_message, 'messages')

    try:
        channel.start_consuming()
    finally:
        logger.info('Stopped message processor.')


def start_routing():
    connection = get_rabbitmq_connection()
    channel = connection.channel()
    declare_queues(channel)
    start_message_processor(channel)


if __name__ == '__main__':
    while True:
        try:
            start_routing()
        except KeyboardInterrupt:
            break
        except Exception:
            logger.exception('Unhandled exception occurred. Will retry...')
            time.sleep(5)
