#!/usr/bin/env python3
import argparse
import json
import re
import subprocess


def get_certfile_subject(filename):
    output = subprocess.check_output([
        'openssl',
        'x509',
        '-noout',
        '-subject',
        '-in', filename,
    ])

    return dict(re.findall('/([^=]+)=([^/]+)', output.decode().strip()))


def get_shovel_configs():
    node_uri = 'amqp://localhost'
    beehive_uri = (
        'amqps://beehive:23181'
        '?auth_mechanism=external'
        '&cacertfile=/usr/lib/waggle/SSL/waggleca/cacert.pem'
        '&certfile=/usr/lib/waggle/SSL/node/cert.pem'
        '&keyfile=/usr/lib/waggle/SSL/node/key.pem'
        '&verify=verify_peer'
    )

    subject = get_certfile_subject('/usr/lib/waggle/SSL/node/cert.pem')
    username = subject['CN']

    return {
        'push-to-beehive': {
            'src-uri': node_uri,
            'src-queue': 'to-beehive',
            'dest-uri': beehive_uri,
            'dest-exchange': 'messages',
            'publish-properties': {
                'delivery_mode': 2,
                'user_id': username,
            }
        },
        'pull-from-beehive': {
            'src-uri': beehive_uri,
            'src-queue': 'to-{}'.format(username),
            'dest-uri': node_uri,
            'dest-queue': 'messages',
            'publish-properties': {
                'delivery_mode': 2,
            }
        },
        'ep-to-beehive': {
            'src-uri': 'amqp://edgeprocessor',
            'src-queue': 'to-beehive',
            'dest-uri': node_uri,
            'dest-queue': 'to-beehive',
            'publish-properties': {
                'delivery_mode': 2,
            }
        },
        'forward-to-ep': {
            'src-uri': node_uri,
            'src-queue': 'to-sub-0000000000000001',
            'dest-uri': 'amqp://edgeprocessor',
            'dest-queue': 'messages',
            'publish-properties': {
                'delivery_mode': 2,
            }
        },
    }


def start_shovels():
    for name, config in get_shovel_configs().items():
        subprocess.check_output([
            'rabbitmqctl',
            'set_parameter',
            'shovel',
            name,
            json.dumps(config),
        ])


def stop_shovels():
    for name in get_shovel_configs().keys():
        subprocess.check_output([
            'rabbitmqctl',
            'clear_parameter',
            'shovel',
            name,
        ])


actions = {
    'start': start_shovels,
    'stop': stop_shovels,
}


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('action', choices=actions.keys())
    args = parser.parse_args()
    actions[args.action]()


if __name__ == '__main__':
    main()
